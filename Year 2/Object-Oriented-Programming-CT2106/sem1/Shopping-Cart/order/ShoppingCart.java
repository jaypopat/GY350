package order;

import customer.Customer;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class ShoppingCart {
    private boolean closed = false; // initially set to false
    private ArrayList<Item> items = new ArrayList<Item>(); // initialises an array list which holds 'Item's
    private long cartId; // represents the cartID(randomly-generated)
    public Customer customer; // reference to customer class

    public ShoppingCart(Customer customer) {
        this.cartId = makeCartID(); // a random long generated by the makeCartID() function gets assigned to the cartID class field
        this.customer = customer; // represents the customer who added items to the cart
    }

    private long makeCartID() {
        Random rand = new Random();
        return Math.abs(rand.nextLong());
        // utilises the java.util.random package to generate a random long and return it
    }

    public long getCartId() {
        return cartId;
    }
    // returns the unique cartID

    public void addItem(Item item) {
        if (closed) System.out.println("Cannot add item : " + item.getName());
        else items.add(item);
        // method to add 'Item' to the collection - can only perform this if close function hasn't been called // cart hasnt been locked
    }

    public void removeItem(Item item) {
        if (closed)
            System.out.println("Cannot remove item : " + item.getName());
        else items.remove(item);
        // method to remove 'Item' from the collection - can only perform this if close function hasn't been called // cart hasnt been locked

    }

    //    This method calculates the total cost of the cart.
//     It adds up the prices of all items in the order and returns the total cost
    public BigDecimal getTotalCost() {
        BigDecimal totalCost = new BigDecimal(0);
        for (Item item : items) {
            totalCost = totalCost.add(item.getPrice());
        }
        return totalCost;
    }

    //     This method returns the items in the cart.
    public List<Item> getItems() {
        return items;
    }

    // when the flag is true/ close method called - customer cannot add/remove items from the cart
    public void close() {
        closed = true;
    }

    // empties the items collection
    public void clear() {
        items.clear();
    }

    @Override
    public String toString() {
        return "ShoppingCart{" + "closed=" + closed + ", items=" + items + '}';
    }
    // returns a string representation of the class
}
